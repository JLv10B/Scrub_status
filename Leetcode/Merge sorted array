class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.

        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers
        m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 
        into a single array sorted in non-decreasing order.
        The final sorted array should not be returned by the function, but instead be stored inside the 
        array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote 
        the elements that should be merged, and the last n elements are set to 0 and should be ignored. 
        nums2 has a length of n.

        Input:
        nums1 = [1,2,3,0,0,0] <- 0 should be ignored
        m = 3
        nums2 = [2,5,6]
        n = 3

        Outpt:
        nums1 = [1,2,2,3,5,6]

        """
        # 3 pointers: nums1 elements, nums2 elements, full length of nums1
        # Compare the largest elements from each list
        # Whichever is larger place at the end of nums1
        # Move the pointer of nums1 elements or nums2 and the pointer the full length of nums1
        # Repeat until the smallest element of nums2 is inserted into nums
        index1 = m - 1
        index2 = n - 1
        nums1_full = m + n - 1
        while index2 >= 0:
            if index1 >= 0 and nums1[index1] >= nums2[index2]: # Can't have a negative index
                nums1[nums1_full] = nums1[index1]
                index1 -= 1
            else:
                nums1[nums1_full] = nums2[index2]
                index2 -= 1
            nums1_full -= 1
        

