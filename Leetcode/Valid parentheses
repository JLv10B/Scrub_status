class Solution:
    def isValid(self, s: str) -> bool:
        """Determine if a string input is valid.
        An input string is valid if:
            Open brackets must be closed by the same type of brackets.
            Every close bracket has a corresponding open bracket of the same type.
            Open brackets must be closed in the correct order.
            
        Input: s = '()[]{}'
        Output: true
        
        Input: s = '(]'
        Output: false
        
        Data structure:
       
       valid_pairing:
       {
          'open parenthese':'closed partentheses'
          'open braket':'closed bracket'
          ...
        }
        
        stack:
        [
          some open thing
          ...
        ]
            """
        # Define a dictionary that defines valid pairs with open bracket as key and the corresponding closed bracket of the same type as the value
        valid_pairing = {'(':')', '{':'}', '[':']'}
        
        # Create a empty stack to store values in
        stack = []
        
        # Iterate through the input list. If the value is an open bracket place in the stack. If the value is not an open bracket then pop the last value in the stack and utilize the dictionary to validate the open and closed bracket as a valid pairing.
        for char in s:
            if char in '({[':
                stack.append(char)
            elif len(stack) == 0 or char != valid_pairing[stack.pop()]:
                return False
            
        # If the stack is empty at the end of the list all open brackets are accounted for and we can return true
        return len(stack) == 0
        
