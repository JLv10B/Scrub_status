#Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
#You may assume that each input would have exactly one solution, and you may not use the same element twice.
#You can return the answer in any order.

#Example 1:
#Input: nums = [2,7,11,15], target = 9
#Output: [0,1]
#Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

#Example 2:
#Input: nums = [3,2,4], target = 6
#Output: [1,2]

#Example 3:
#Input: nums = [3,3], target = 6
#Output: [0,1]

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        """Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
        
        Input: nums = [x,y,...] target = z
        x + y == z

        Data structure:
        {
            value: index,
            ...
        }

        Output: [dict[x], dict[y]]

        """
        # Initialize empty dictionary remainder_dict{number:index,...} to store numbers that we have already checked
        # Iterate over a list of tuples from enumerate(nums) to generate a remainder.
        remainder_dict = {}
        for index, number in enumerate(nums):
            remainder = target - number 
            # Check if the remainder is in remainder_dict{}, if it is then return index of the remainder from the dictionary and the index of the current number.
            if remainder in remainder_dict:
                return(remainder_dict[remainder], index)
            # If the remainder is not in remainder_dict{} then add the number as a key and the index as a value
            else:
                remainder_dict[number] = index
